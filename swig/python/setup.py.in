import os, sys, math
try:
    from setuptools import setup, Extension
    from setuptools import Command
except:
    from distutils.core import setup, Extension
    from distutils.cmd import Command
from distutils.command.build_ext import build_ext
from distutils.command.build import build
from distutils.ccompiler import get_default_compiler

class liquibook_wrap(Command):
    description = "generate Python wrappers"
    user_options = []
    def initialize_options(self): pass
    def finalize_options(self): pass
    def run(self):
        print('Generating Python bindings for Liquibook...')
        swig_version = os.popen("swig -version").read().split()[2]
        major_swig_version = swig_version[0]
        if major_swig_version < '4':
           print('Warning: You have SWIG {} installed, but at least SWIG 4.0.1'
                 ' is recommended. \nSome features may not work.'
                 .format(swig_version))
        swig_dir = os.path.join("..","swig")
        os.system('swig -python -globals -c++ ' + 
                  '-I%s ' % swig_dir +
                  '-outdir liquibook -o liquibook/liquibook_wrap.cpp ' +
                  '../liquibook.i')

class liquibook_build(build):
    user_options = build.user_options + [
        ('static', None,
         "link against static CRT libraries on Windows")
    ]
    boolean_options = build.boolean_options + ['static']
    def initialize_options(self):
        build.initialize_options(self)
        self.static = None
    def finalize_options(self):
        build.finalize_options(self)


class liquibook_build_ext(build_ext):
    user_options = build_ext.user_options + [
        ('static', None,
         "link against static CRT libraries on Windows")
    ]
    boolean_options = build.boolean_options + ['static']
    def initialize_options(self):
        build_ext.initialize_options(self)
        self.static = None
    def finalize_options(self):
        build_ext.finalize_options(self)
        self.set_undefined_options('build', ('static','static'))

        self.include_dirs = self.include_dirs or []
        self.library_dirs = self.library_dirs or []
        self.define = self.define or []
        self.libraries = self.libraries or []

        extra_compile_args = []
        extra_link_args = []

        compiler = self.compiler or get_default_compiler()

        if compiler == 'msvc':
          # TODO: find windows box
          pass
        elif compiler == 'unix':
            self.include_dirs += ['../../src/']
            #extra_compile_args += ['-std=c++11','-stdlib=libc++', '-DSWIG_BUILD']
            extra_compile_args += ['-std=c++11', '-DSWIG_BUILD']
        else:
            pass

        for ext in self.extensions:
            ext.extra_compile_args = ext.extra_compile_args or []
            ext.extra_compile_args += extra_compile_args

            ext.extra_link_args = ext.extra_link_args or []
            ext.extra_link_args += extra_link_args
		

classifiers = [
    'Development Status :: 1 - Planning Copy',
    'Environment :: Console',
    'Intended Audience :: Developers',
    'Intended Audience :: Science/Research',
    'Intended Audience :: End Users/Desktop',
    'License :: OSI Approved :: BSD License',
    'Natural Language :: English',
    'Programming Language :: C++',
    'Programming Language :: Python',
    'Topic :: Scientific/Engineering',
    'Operating System :: Microsoft :: Windows',
    'Operating System :: POSIX',
    'Operating System :: Unix',
    'Operating System :: MacOS',
]

setup(name             = "liquibook",
      version          = "@PACKAGE_VERSION@",
      description      = "Python bindings for the liquibook",
      long_description = """
Basic python wrapper for the liquibook
      """,
      author           = "Mike Kipnis",
      author_email     = "mike.kipnis@gmail.com",
      url              = "https://www.github.com/mkipnis",
      license          = "BSD 3-Clause",
      classifiers      = classifiers,
      py_modules       = ['liquibook.__init__','liquibook.liquibook','liquibook.pretty_print'],
      ext_modules      = [Extension("liquibook._liquibook",
                                    ["liquibook/liquibook_wrap.cpp"])
                         ],
      data_files       = [('share/doc/liquibook', ['../license.txt'])],
      cmdclass         = { 'wrap': liquibook_wrap,
                          'build': liquibook_build,
                          'build_ext': liquibook_build_ext,
                          }
      )

